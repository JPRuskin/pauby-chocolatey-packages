<?xml version="1.0" encoding="utf-8"?>
<!-- Read this before creating packages: https://chocolatey.org/docs/create-packages -->
<!-- It is especially important to read the above link to understand additional requirements when publishing packages to the community feed aka dot org (https://chocolatey.org/packages). -->
<!-- Test your packages in a test environment: https://github.com/chocolatey/chocolatey-test-environment -->
<!--
This is a nuspec. It mostly adheres to https://docs.nuget.org/create/Nuspec-Reference. Chocolatey uses a special version of NuGet.Core that allows us to do more than was initially possible. As such there are certain things to be aware of:

* the package xmlns schema url may cause issues with nuget.exe
* Any of the following elements can ONLY be used by choco tools - projectSourceUrl, docsUrl, mailingListUrl, bugTrackerUrl, packageSourceUrl, provides, conflicts, replaces
* nuget.exe can still install packages with those elements but they are ignored. Any authoring tools or commands will error on those elements
-->
<!-- You can embed software files directly into packages, as long as you are not bound by distribution rights. -->
<!-- * If you are an organization making private packages, you probably have no issues here -->
<!-- * If you are releasing to the community feed, you need to consider distribution rights. -->
<!-- Do not remove this test for UTF-8: if appear as greek uppercase omega letter enclosed in quotation marks, you should use an editor that supports UTF-8, not this one. -->
<package xmlns="http://schemas.microsoft.com/packaging/2015/06/nuspec.xsd">
    <metadata>
        <!-- == PACKAGE SPECIFIC SECTION == -->
        <!-- This section is about this package, although id and version have ties back to the software -->
        <!-- id is lowercase and if you want a good separator for words, use '-', not '.'. Dots are only acceptable as suffixes for certain types of packages, e.g. .install, .portable, .extension, .template -->
        <!-- If the software is cross-platform, attempt to use the same id as the debian/rpm package(s) if possible. -->
        <id>keepass-plugin-readablepassphrasegen</id>
        <!-- version should MATCH as closely as possible with the underlying software -->
        <!-- Is the version a prerelease of a version? https://docs.nuget.org/create/versioning#creating-prerelease-packages -->
        <!-- Note that unstable versions like 0.0.1 can be considered a released version, but it's possible that one can release a 0.0.1-beta before you release a 0.0.1 version. If the version number is final, that is considered a released version and not a prerelease. -->
        <version>1.1.1</version>
        <packageSourceUrl>https://github.com/pauby/ChocoPackages/tree/master/automatic/keepass-plugin-readablepassphrasegen</packageSourceUrl>
        <!-- owners is a poor name for maintainers of the package. It sticks around by this name for compatibility reasons. It basically means you. -->
        <owners>pauby</owners>
        <!-- ============================== -->
        <!-- == SOFTWARE SPECIFIC SECTION == -->
        <!-- This section is about the software itself -->
        <title>KeePass Plugin Readable Passphrase Generator</title>
        <authors>Murray Grant</authors>
        <!-- projectUrl is required for the community feed -->
        <projectUrl>https://github.com/ligos/readablepassphrasegenerator</projectUrl>
        <!-- <iconUrl></iconUrl> -->
        <copyright>2018 Murray Grant</copyright>
        <!-- If there is a license Url available, it is is required for the community feed -->
        <licenseUrl>https://github.com/ligos/readablepassphrasegenerator/blob/master/LICENSE.txt</licenseUrl>
        <requireLicenseAcceptance>false</requireLicenseAcceptance>
        <projectSourceUrl>https://github.com/ligos/readablepassphrasegenerator</projectSourceUrl>
        <docsUrl>https://github.com/ligos/readablepassphrasegenerator/wiki</docsUrl>
        <!-- <mailingListUrl>https://sourceforge.net/p/keepass/discussion/</mailingListUrl> -->
        <bugTrackerUrl>https://github.com/ligos/readablepassphrasegenerator/issues</bugTrackerUrl>
        <tags>keepass plugin password generator admin</tags>
        <summary>The Readable Passphrase Generator generates passphrases which are (mostly) grammatically correct but nonsensical. These are easy to remember (for humans) but difficult to guess (for humans and computers).</summary>
        <description>The Readable Passphrase Generator generates passphrases which are (mostly) grammatically correct but nonsensical. These are easy to remember (for humans) but difficult to guess (for humans and computers).

## Why use it?

Because you can make passphrases which are as strong as traditional "strong" passwords (8 letters long, upper, lower, numbers, etc) which you can memorise in 5 minutes instead of 5 days. (And its fun to read the phrases it generates!)

Use this passphrase to protect:

* Your KeePass, 1Password, LastPass or favourite password manager database.
* You computer login at home or work.
* Your eBay, Facebook, Google, OpenID or other high value account.
* Your Internet banking account.

Some examples passphrases:

* a wound rebuffs an incline
* the statesman will burgle amidst lucid sunlamps
* plaid foresails repel ashamedly upon the birdbath
* 234 readers affably build the untouched athlete
* Sydney reasoned "an edible sleeve fumbles the argumentative float"

We're told the best password is at least 8 characters 12 characters long, contains upper and lower case letters, numbers and punctuation symbols. Unfortunately, this makes the "best" password something which looks like gibberish and is, frankly, quite hard for ordinary people to remember.

Perhaps something like: 3h4o.%\vJACj

I used to generate 12-16 character passwords like this and memorise them. It would commonly take up to two weeks of typing them in multiple times per day. All told, I've memorised perhaps 10 of these in my life. They get used for my KeePass database, Windows logons (at work and home) and Truecrypt volume, but nothing else because I can't afford to memorise any more (lest I memorise a password and my address falls out of my brain!).

That is all too hard!

So we resort to taking a some word from the dictionary, capitalise a few letters, turn an o into a 0 and stick some punctuation at the end: like our friend Tr0ubador. Only problem is, while that is easy to remember (well, easier according to XKCD), its also trivially easy for a computer to guess.

I memorised the statesman will burgle amidst lucid sunlamps after typing it twice. And, even if some evil hacker knows my dictionary (which it will, because its included with this project), that passphrase is still equivalent to an 11 letter password with upper, lower, numbers and symbols (using the 13k word dictionary from version 0.13).

Much, much easier, I think. (So does my wife!)

**NOTE**: This is an automatically updated package. If you find it is out of date by more than a week, please contact the maintainer(s) and let them know the package is no longer updating correctly.
</description>
        <releaseNotes>https://github.com/ligos/readablepassphrasegenerator/blob/master/README.md</releaseNotes>
        <!-- =============================== -->
        <!-- Specifying dependencies and version ranges? https://docs.nuget.org/create/versioning#specifying-version-ranges-in-.nuspec-files -->
        <dependencies>
            <dependency id="keepass" version="2.0" />
        <!-- <dependency id="" version="[_MIN_VERSION_INCLUSIVE, MAX_VERSION_INCLUSIVE]" /> -->
        <!-- <dependency id="" version="[_MIN_VERSION_INCLUSIVE, MAX_VERSION_EXCLUSIVE)" /> -->
        <!-- <dependency id="" /> -->
        <!-- <dependency id="chocolatey-uninstall.extension" /> -->
        </dependencies>
        <!-- chocolatey-uninstall.extension - If supporting 0.9.9.x (or below) and including a chocolateyUninstall.ps1 file to uninstall an EXE/MSI, you probably want to include chocolatey-uninstall.extension as a dependency. Please verify whether you are using a helper function from that package. -->
        <!--<provides>NOT YET IMPLEMENTED</provides>-->
        <!--<conflicts>NOT YET IMPLEMENTED</conflicts>-->
        <!--<replaces>NOT YET IMPLEMENTED</replaces>-->
    </metadata>
    <files>
        <!-- this section controls what actually gets packaged into the Chocolatey package -->
        <file src="tools\**" target="tools" />
        <!--Building from Linux? You may need this instead: <file src="tools/**" target="tools" />-->
    </files>
</package>
